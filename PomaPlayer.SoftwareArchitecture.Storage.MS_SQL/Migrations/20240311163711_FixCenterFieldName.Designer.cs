// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PomaPlayer.SoftArc.Storage.Database;

#nullable disable

namespace PomaPlayer.SoftArc.Storage.MS_SQL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240311163711_FixCenterFieldName")]
    partial class FixCenterFieldName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.Center", b =>
                {
                    b.Property<Guid>("IsnNode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressNumberHouse")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnNode");

                    b.ToTable("Centers");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.CenterTrainer", b =>
                {
                    b.Property<Guid>("IsnCenter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnTrainer")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnCenter", "IsnTrainer");

                    b.HasIndex("IsnTrainer");

                    b.HasIndex("IsnCenter", "IsnTrainer");

                    b.ToTable("CentersTrainers");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.Customer", b =>
                {
                    b.Property<Guid>("IsnNode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IsnCenter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnNode");

                    b.HasIndex("IsnCenter");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.Trainer", b =>
                {
                    b.Property<Guid>("IsnNode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnNode");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.TrainerCustomer", b =>
                {
                    b.Property<Guid>("IsnTrainer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnTrainer", "IsnCustomer");

                    b.HasIndex("IsnCustomer");

                    b.HasIndex("IsnTrainer", "IsnCustomer");

                    b.ToTable("TrainersCustomers");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.CenterTrainer", b =>
                {
                    b.HasOne("PomaPlayer.SoftArc.Storage.Models.Center", "Center")
                        .WithMany("CenterTrainers")
                        .HasForeignKey("IsnCenter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PomaPlayer.SoftArc.Storage.Models.Trainer", "Trainer")
                        .WithMany("TrainerCenters")
                        .HasForeignKey("IsnTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.Customer", b =>
                {
                    b.HasOne("PomaPlayer.SoftArc.Storage.Models.Center", "Center")
                        .WithMany("Customers")
                        .HasForeignKey("IsnCenter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.TrainerCustomer", b =>
                {
                    b.HasOne("PomaPlayer.SoftArc.Storage.Models.Customer", "Customer")
                        .WithMany("CustomerTrainers")
                        .HasForeignKey("IsnCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PomaPlayer.SoftArc.Storage.Models.Trainer", "Trainer")
                        .WithMany("TrainerCustomers")
                        .HasForeignKey("IsnTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.Center", b =>
                {
                    b.Navigation("CenterTrainers");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.Customer", b =>
                {
                    b.Navigation("CustomerTrainers");
                });

            modelBuilder.Entity("PomaPlayer.SoftArc.Storage.Models.Trainer", b =>
                {
                    b.Navigation("TrainerCenters");

                    b.Navigation("TrainerCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
