@using PomaPlayer.SoftArc.Components.Extensions;
@using PomaPlayer.SoftArc.Web.Controllers;
@using PomaPlayer.SoftArc.Web.Features.DtoModels.Customer;
@using PomaPlayer.SoftArc.Web.Features.Interfaces;
@inject ICenterManager _centerManager
@model EditCustomerDto
@{
    ViewBag.Title = "Клиент";

    // todo: внедрять во views какие-то services, managers и тд "НЕЛЬЗЯ", если нужно подтянуть какие-то данные используем ajax запросы к методам controller (сейчас это сделано для упрощения кода)
    // todo: НО внедрять IHtmlLocalizer (интерфейс локализации строк) допускается
    var centers = await _centerManager.GetListCentersDropDownAsync(); 
}

<div class="container m-auto w-75 mx-auto mt-3">
    <div class="row bg-white shadow-sm">
        <div class="col border rounded p-4">
            <h3 class="text-center mb-4">Клиент</h3>
            @using (Html.BeginForm(Model.IsnNode == Guid.Empty ? nameof(ManageController.CreateCustomer) : nameof(ManageController.UpdateCustomer), ManageController.Manage, FormMethod.Post))
            {
                @Html.HiddenFor(x => x.IsnNode)
                <div class="form-group mb-3 form-element text-danger">
                    @Html.ValidationSummary(true)
                </div>
                <div class="row">
                    <div class="col">
                        @await Component.TextAsync(Html, m => m.SurName)
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        @await Component.TextAsync(Html, m => m.Name)
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        @await Component.TextAsync(Html, m => m.LastName)
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        @await Component.TextAsync(Html, m => m.Birthday)
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        @await Component.SelectAsync(Html, m => m.IsnCenter, centers)
                    </div>
                </div>
                <div class="form-group mb-3 form-element">
                    <div class="float-start">
                        @if (Model.IsnNode == Guid.Empty)
                        {
                            <a class="btn btn-outline-success" href="@Url.ActionLink(nameof(ManageController.GetListTrainers), ManageController.Manage)">Назад</a>
                        }
                        else
                        {
                            <a class="btn btn-outline-success" href="@Url.ActionLink(nameof(ManageController.GetInfoCustomer), ManageController.Manage, new { isnCustomer = Model.IsnNode })">Назад</a>
                        }
                    </div>
                    <div class="float-end">
                        @if (Model.IsnNode == Guid.Empty)
                        {
                            <button type="submit" value="true" class="btn btn-outline-primary">Добавить</button>
                        }
                        else
                        {
                            <a class="btn btn-outline-danger" href="@Url.ActionLink(nameof(ManageController.DeleteCustomer), ManageController.Manage, new { isnCustomer = Model.IsnNode })">Удалить</a>
                            <button type="submit" value="true" class="btn btn-outline-secondary">Изменить</button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>